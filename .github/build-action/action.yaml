name: 'ludeeus/container build action'
inputs:
  container:
    description: The container image that should be built
    required: true
  title:
    description: The title of the container
    required: true
  user:
    description: The user to be used to authenticate against ghcr.io
    required: true
  token:
    description: The token to be used to authenticate against ghcr.io
    required: true
runs:
  using: "composite"
  steps:
    - name: 📃 Get changed files
      if: github.event_name != 'release'
      id: changed_files
      uses: jitterbit/get-changed-files@v1

    - name: ❓ Should build ${{ inputs.container }}?
      shell: bash
      id: should_build
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          should_build=true
        else
          should_build=$(bash ./scripts/should_build.sh "${{ inputs.container }}" "${{ steps.changed_files.outputs.all }}")
        fi
        echo "::set-output name=build::$should_build"

    - name: ❔ Should publish ${{ inputs.container }}?
      shell: bash
      if: steps.should_build.outputs.build == 'true'
      id: should_publish
      run: |
        if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.event_name }}" == "push" ]]; then
          echo "::set-output name=publish::true"
        else
          echo "::set-output name=publish::false"
        fi

    - name: ➕ Additional arguments
      shell: bash
      if: steps.should_build.outputs.build == 'true'
      id: arguments
      run: |
        declare -a args
        if [ "${{ steps.should_publish.outputs.publish }}" == "true" ]; then
          args+=(" --push ")
        fi
        if [[ "${{ github.event_name }}" == "release" ]]; then
          args+=(" --tag stable ")
          args+=(" --tag $(echo ${{ github.ref }} | awk -F"/" '{print $NF}' ) ")
        fi
        echo "${args[@]}"
        echo "::set-output name=arguments::${args[@]}"


    - name: 🔓 Registry login
      uses: docker/login-action@v1.14.1
      if: steps.should_publish.outputs.publish == 'true'
      with:
        registry: ghcr.io
        username: ${{ inputs.user }}
        password: ${{ inputs.token }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1.2.0
      if: steps.should_build.outputs.build == 'true'
      with:
        platforms: amd64,arm64

    - name: Set up Docker Buildx
      id: buildx
      if: steps.should_build.outputs.build == 'true'
      uses: docker/setup-buildx-action@v1.6.0
      with:
        install: true

    - name: Cache Docker layers
      uses: actions/cache@v3.0.2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-multi-buildx

    - name: Inspect builder
      shell: bash
      if: steps.should_build.outputs.build == 'true'
      run: |
        echo "Name:      ${{ steps.buildx.outputs.name }}"
        echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
        echo "Status:    ${{ steps.buildx.outputs.status }}"
        echo "Flags:     ${{ steps.buildx.outputs.flags }}"
        echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

    - name: 🛠️ Build ${{ inputs.container }}
      if: steps.should_build.outputs.build == 'true'
      shell: bash
      run: bash ./scripts/build.sh --container "${{ inputs.container }}" --title "${{ inputs.title }}" ${{ steps.arguments.outputs.arguments }}

    - name: Move cache
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache